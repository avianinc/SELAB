# Systemd inside a Docker container, for CI only
ARG ubuntu_version=20.04
FROM ubuntu:${ubuntu_version}

# Netlogo version - Must be after the FROM statment
ARG NETLOGO_VERSION=6.2.0

USER root

ENV \
    DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true \
    PYTHONUNBUFFERED=1 \
    TZ=UTC/NEW_YORK \
    SCILAB_EXECUTABLE='/opt/scilab-6.0.2/bin/scilab-adv-cli'

# DEBIAN_FRONTEND is set to avoid being asked for input and hang during build:
# https://anonoz.github.io/tech/2020/04/24/docker-build-stuck-tzdata.html
RUN export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install --yes \
    build-essential \
    systemd \
    curl \
    git \
    tar \
    wget \
    sudo \
    nano \
    python3 \
    python3-venv \
    python3-pip \
    python3-dev \
    libssl-dev \
    libcurl4-openssl-dev \
    inetutils-syslogd \
    r-base \
    r-base-dev \
    # scilab \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Kill all the things we don't need
RUN find /etc/systemd/system \
    /lib/systemd/system \
    -path '*.wants/*' \
    -not -name '*journald*' \
    -not -name '*systemd-tmpfiles*' \
    -not -name '*systemd-user-sessions*' \
    -exec rm \{} \;

RUN mkdir -p /etc/sudoers.d

RUN systemctl set-default multi-user.target

STOPSIGNAL SIGRTMIN+3

# Install Nodejs for jupyter builds
# https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04
#RUN curl -sL https://deb.nodesource.com/setup_18.x -o /tmp/nodesource_setup.sh && \
#    sudo bash /tmp/nodesource_setup.sh && \
#    sudo apt install nodejs -y && \
#    echo "Nodejs version: $(node -v)"

# Update nodejs installtion for +18x
# https://deb.nodesource.com/
RUN sudo mkdir -p /etc/apt/keyrings && \ 
    sudo apt-get update && sudo apt-get install -y ca-certificates curl gnupg && \
    sudo curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    NODE_MAJOR=20 && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list && \
    sudo apt-get update && sudo apt-get install nodejs -y

# Install Java for Netlogo
RUN apt-get update && apt-get install -y lsb-release

RUN DIST_VER=$(lsb_release -r | awk '{print $2}') && \
    JAVA_VER=openjdk-16-jdk && \
    if [ "${DIST_VER}" = "20.04" ]; then \
        echo "Installing ${JAVA_VER} for Ubuntu ${DIST_VER}"; \
        DEBIAN_FRONTEND=noninteractive apt-get update && \
        apt-get install -y ${JAVA_VER} || \
        (echo -e "\nCheck if a different version of java is available and edit Dockerfile accordingly"; exit 1) \
    else \
        echo "Don't know what java to install for Ubuntu ${DIST_VER}"; \
        exit 1; \
    fi

# Add netlogo
RUN NETLOGO_VER=6.2.0 && \
    mkdir -p /opt/netlogo && \
    cd /opt/netlogo && \
    wget https://ccl.northwestern.edu/netlogo/$NETLOGO_VER/NetLogo-$NETLOGO_VER-64.tgz && \
    tar xf NetLogo-$NETLOGO_VER-64.tgz && \
    rm NetLogo-$NETLOGO_VER-64.tgz

ENV PATH="/opt/netlogo/NetLogo\ ${NETLOGO_VER}:${PATH}"

# Run package updates and install packages for R
#RUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \
#    && apt-get update \
#    && apt-get install -y software-properties-common \
#    && add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' \
#    && apt-get update \
#    && apt-get install -y r-base

# Install scilab and coselica toolbox
WORKDIR /opt
RUN wget https://www.scilab.org/download/6.0.2/scilab-6.0.2.bin.linux-x86_64.tar.gz \
	&& tar xf scilab-6.0.2.bin.linux-x86_64.tar.gz \
	&& /opt/scilab-6.0.2/bin/scilab-cli -e  "atomsRepositoryAdd([\"http://atoms.scilab.org/6.0\"]); exit;" -nb \
	&& /opt/scilab-6.0.2/bin/scilab-cli -e  "atomsInstall(\"coselica\"); exit;" -nb \
	&& rm scilab-6.0.2.bin.linux-x86_64.tar.gz

# Uncomment these lines for a development install
# ENV TLJH_BOOTSTRAP_DEV=yes \
#     TLJH_BOOTSTRAP_PIP_SPEC=/srv/src \
ENV PATH=/opt/tljh/hub/bin:${PATH}

EXPOSE 80

CMD ["/bin/bash", "-c", "exec /lib/systemd/systemd --log-target=journal 3>&1"]